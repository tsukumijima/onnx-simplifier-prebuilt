name: Build and Test

on:
  push:
    branches:
      - main
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

env:
  # This is used to skip tests that are too heavy for CI
  ONNXSIM_CI: 1

jobs:
  build_wheels:
    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      CIBW_ENVIRONMENT_PASS_LINUX: ONNXSIM_CI
      CIBW_BEFORE_ALL_LINUX: WD=`pwd` && /opt/python/cp38-cp38/bin/python -m pip install --target tmp_cmake cmake && cp tmp_cmake/bin/cmake /usr/local/bin/cmake && rm -rf tmp_cmake && /opt/python/cp38-cp38/bin/python -m pip install cmake && cmake --version && whereis cmake
      CIBW_BEFORE_ALL_MACOS: WD=`pwd` && pip install cmake
      CIBW_TEST_REQUIRES_LINUX: pytest flake8 onnxruntime
      CIBW_TEST_REQUIRES_MACOS: pytest onnxruntime
      CIBW_TEST_REQUIRES_WINDOWS: pytest onnxruntime
      CIBW_BEFORE_TEST_LINUX: pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
      CIBW_BEFORE_TEST_MACOS: pip install torch torchvision
      CIBW_BEFORE_TEST_WINDOWS: pip install torch torchvision
      # Skip universal2 x86_64 tests (as PyTorch no longer supports them)
      CIBW_TEST_SKIP: "*_universal2:x86_64"
      CIBW_TEST_COMMAND: pytest -v {project}/tests/test_python_api.py
      # Skip 32-bit or musl or pypy builds
      CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_* pp*"
      # Only build on Python 3.10 and above
      CIBW_PROJECT_REQUIRES_PYTHON: ">=3.10"
    name: Build wheel ${{ matrix.name }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2025
            archs: AMD64
            name: onnxsim-prebuilt
          - os: macos-15
            # Only build universal2 package
            # Related issue: https://github.com/pypa/cibuildwheel/issues/1190
            archs: universal2
            name: onnxsim-prebuilt
          - os: ubuntu-24.04
            archs: x86_64
            name: onnxsim-prebuilt
          - os: ubuntu-24.04-arm
            archs: aarch64
            name: onnxsim-prebuilt
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Build onnxsim wheels
      uses: pypa/cibuildwheel@v2.23.3
      env:
        CIBW_ARCHS_WINDOWS: ${{ contains(matrix.os, 'windows') && matrix.archs || 'AMD64' }}
        CIBW_ARCHS_MACOS: ${{ contains(matrix.os, 'macos') && matrix.archs || 'x86_64' }}
        CIBW_ARCHS_LINUX: ${{ contains(matrix.os, 'ubuntu') && matrix.archs || 'x86_64' }}
        CIBW_ENVIRONMENT: CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5" ONNXSIM_PKG_NAME=${{ matrix.name }}
        CIBW_ENVIRONMENT_WINDOWS: USE_MSVC_STATIC_RUNTIME=0 CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON" ONNXSIM_PKG_NAME=${{ matrix.name }}
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15 ONNXSIM_PKG_NAME=${{ matrix.name }}
    - uses: actions/upload-artifact@v4
      with:
        name: python-dist-${{ matrix.os }}-${{ matrix.archs }}-${{ matrix.name }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Update version
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        sed -i "s/0.0.0/${GITHUB_REF/refs\/tags\/v/}/" setup.py

    - name: Build sdist
      run: |
        export ONNXSIM_SDIST=ON
        export ONNXSIM_PKG_NAME=onnxsim-prebuilt
        pipx run build --sdist

    - name: Install and test sdist
      run: |
        # It's important to leave the project directory where a 'onnxsim' subdirectory exists
        cd dist
        python3 -m pip install onnxruntime
        python3 -m pip install onnxsim_prebuilt-*.tar.gz
        python3 -c "import onnxsim; print(dir(onnxsim))"
        python3 -m pip uninstall -y onnxsim-prebuilt

    - uses: actions/upload-artifact@v4
      with:
        name: python-dist-sdist
        path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        # unpacks python-dist artifact into dist/
        # if `name: python-dist` is omitted, the action will create extra parent dir
        pattern: python-dist-*
        path: dist
        merge-multiple: true
    - name: Publish distribution ðŸ“¦ to Test PyPI
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    - name: Publish distribution ðŸ“¦ to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  build_wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: mymindstorm/setup-emsdk@v14
    - name: Verify
      run: emcc -v

    - run: |
        sudo apt update
        sudo apt install protobuf-compiler

    - name: Build
      run: ./build_wasm.sh

    - uses: actions/upload-artifact@v4
      with:
        name: wasm
        path: |
          build-wasm-node-OFF/onnxsim.js
          build-wasm-node-OFF/onnxsim.wasm

    - name: Upload to convertmodel.com
      # if: ${{ github.ref == 'refs/heads/master' }}
      if: false
      run: |
        wget https://gosspublic.alicdn.com/ossutil/1.7.14/ossutil64
        chmod 755 ossutil64
        echo "[Credentials]" >> ~/.ossutilconfig
        echo "language=EN" >> ~/.ossutilconfig
        echo "endpoint=oss-cn-beijing.aliyuncs.com" >> ~/.ossutilconfig
        echo "accessKeyID=${{ secrets.OSS_ACCESS_KEY }}" >> ~/.ossutilconfig
        echo "accessKeySecret=${{ secrets.OSS_SECRET_KEY }}" >> ~/.ossutilconfig

        gzip -c -9 build-wasm-node-OFF/onnxsim.wasm > onnxsim_gz.wasm
        ./ossutil64 --config-file ~/.ossutilconfig cp -u onnxsim_gz.wasm oss://converter-web/onnxsim.wasm --meta=Content-Type:application/wasm#Content-Encoding:gzip
        ./ossutil64 --config-file ~/.ossutilconfig cp -u build-wasm-node-OFF/onnxsim.js oss://converter-web/

  build_wasm_with_noderawfs:
    name: Build WebAssembly with NODERAWFS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: mymindstorm/setup-emsdk@v14
    - name: Verify
      run: emcc -v

    - run: |
        sudo apt update
        sudo apt install protobuf-compiler

    - name: Build
      run: ./build_wasm.sh ON

    - uses: actions/upload-artifact@v4
      with:
        name: wasm-with-noderawfs
        path: |
          build-wasm-node-ON/onnxsim.js
          build-wasm-node-ON/onnxsim.wasm

  build_native:
    name: Build Native
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
        mkdir build-native
        cd build-native
        cmake -GNinja ..
        ninja onnxsim_bin

    - uses: actions/upload-artifact@v4
      with:
        name: native
        path: |
          build-native/onnxsim
